TREE LEETCODE

1.Cousins in Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool isCousins(TreeNode* root, int x, int y) 
    {pair<TreeNode *,pair<int,int>> t1= isCous(root, x ); 
    pair<TreeNode *,pair<int,int>> t2 = isCous(root, y );
     if( t1.second.second ==t2.second.second && t1.second.first !=t2.second.first)
         return true;
     else
         return false; 
    }
    pair<TreeNode *,pair<int,int>> isCous(TreeNode* root, int x ) 
{
    list<pair<TreeNode *,int>> q;
    q.push_back(pair(root,-1));
    int level = 0;
    while (q.size() > 0)
    {       
        int count = q.size(); 
        level++;
        while (count--)
        {   
            pair<TreeNode *,int> top = q.front();
            q.pop_front();
            cout<<top.first->val<<top.second<<" ";
            
            if (top.first->left != NULL)
               { q.push_back(pair(top.first->left,top.first->val));
                   if(top.first->left->val==x)
                   return pair(top.first->left,pair(top.first->val,level));
               }
            
            if (top.first->right != NULL)
                {q.push_back(pair(top.first->right,top.first->val));
                if(top.first->right->val==x)
                   return pair(top.first->right,pair(top.first->val,level));}
          
        }
        //cout<<" ";  // marks end of level
    }return pair(root,pair(root->val,1));
        }         
    
};
DFS
void dfs(TreeNode* root,int x,vector<int>& v,int depth)
{
    if(root->left!=NULL)
    {
        if(root->left->val==x)
        {
            v.push_back(root->val);
            v.push_back(depth);
            return;
        }
        dfs(root->left,x,v,depth+1);
    }
    if(root->right!=NULL)
    {
        if(root->right->val==x)
        {
            v.push_back(root->val);
            v.push_back(depth);
            return;
        }
        dfs(root->right,x,v,depth+1);
    }
}


bool isCousins(TreeNode* root, int x, int y) {
   
    if(root->val==x || root->val==y)
    {
        return(false);
    }
    vector<int>v1,v2;
    dfs(root,x,v1,0);
    dfs(root,y,v2,0);
    if(v1[0]!=v2[0] && v1[1]==v2[1])
    {
        return(true);
    }
    return(false);
}


Catalan numbers
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Let, Cn be the number of possible BSTs with n nodes.

Say, n=3.. so, the nodes are {1,2,3}..
total number of possible trees = possible trees with 1 as the root + possible trees with 2 as the root + possible trees with 3 as the root

We know that, in a BST, the nodes of the left subree will be less than the root node and, the nodes of the right subree will be greater than the root node. So,
i) number of trees with 1 as the root: C0C2 ( 0 nodes in the left subtree and 2 nodes in the right subtree)
ii) number of trees with 2 as the root: C1C1 ( 1 node in the left subtree and 1 node in the right subtree)
iii) number of trees with 3 as the root: C2C0 ( 2 nodes in the left subtree and 0 nodes in the right subtree)

So, total number of trees with 3 nodes C3= C0C2+C1C1+C2C0

This, clearly follows the recursive definition of a catalan number..
(
Catalan numbers are defined as
C0=1
Cn+1= sum(CiCn-i)i=0 to n
)

class Solution {
public:
    int numTrees(int n) {
        vector<int> res(n+1,0);
        res[0]=1;
        for(int i=1;i<=n;i++)
            for(int j=0;j<i;j++){  //<i since i same reason neeche wala
                /*n+1 k liye calculate ksra see upar wala formula)*/ res[i]+=res[j]*res[i-1-j]; //-1 same reason
            }
        return res[n];
    }
};

Therefore, the number of possible BSTs with n nodes is the same as the nth catalan number..


Count Complete Tree Nodes

Solution

Given a complete binary tree, count the number of nodes.
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.
 It can have between 1 and 2h nodes inclusive at the last level h.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& inorderstore){
        if(!root)
            return;
        inorder(root->left,inorderstore);
        inorderstore.push_back(root->val);
        inorder(root->right,inorderstore);
            
    }
    int countNodes(TreeNode* root) {
       vector<int> inorderstore;
        inorder(root,inorderstore);
        for (int i: inorderstore)
            cout<<i<<" ";
        return inorderstore.size();
    }
};




Sum Root to Leaf Numbers

Solution

Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> res;
    void call(TreeNode* root,string p){
        if(root->left==NULL && root->right==NULL){
            cout<<p<<" ";
            res.push_back(std::stoi( p ));
            return;
        }
        if(root->left)
        call(root->left,p+to_string(root->left->val));
        if(root->right)
        call(root->right,p+to_string(root->right->val));

        
    }
    int sumNumbers(TreeNode* root) {
        if(!root)
            return 0;
        call(root,to_string(root->val));
        int sum=0;
        for (auto i:res){
            sum+=i;
            //cout<<i<<" ";
        }
        return sum;
    }
};
