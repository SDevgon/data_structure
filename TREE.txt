TREE LEETCODE

1.Cousins in Binary Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool isCousins(TreeNode* root, int x, int y) 
    {pair<TreeNode *,pair<int,int>> t1= isCous(root, x ); 
    pair<TreeNode *,pair<int,int>> t2 = isCous(root, y );
     if( t1.second.second ==t2.second.second && t1.second.first !=t2.second.first)
         return true;
     else
         return false; 
    }
    pair<TreeNode *,pair<int,int>> isCous(TreeNode* root, int x ) 
{
    list<pair<TreeNode *,int>> q;
    q.push_back(pair(root,-1));
    int level = 0;
    while (q.size() > 0)
    {       
        int count = q.size(); 
        level++;
        while (count--)
        {   
            pair<TreeNode *,int> top = q.front();
            q.pop_front();
            cout<<top.first->val<<top.second<<" ";
            
            if (top.first->left != NULL)
               { q.push_back(pair(top.first->left,top.first->val));
                   if(top.first->left->val==x)
                   return pair(top.first->left,pair(top.first->val,level));
               }
            
            if (top.first->right != NULL)
                {q.push_back(pair(top.first->right,top.first->val));
                if(top.first->right->val==x)
                   return pair(top.first->right,pair(top.first->val,level));}
          
        }
        //cout<<" ";  // marks end of level
    }return pair(root,pair(root->val,1));
        }         
    
};